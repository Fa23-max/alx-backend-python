pipeline {
    agent any
    
    environment {
        DOCKER_IMAGE = 'your-dockerhub-username/messaging-app'
        DOCKER_TAG = "${env.BUILD_NUMBER}"
        PYTHON_VERSION = '3.10'
    }
    
    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }
        
        stage('Verify Git Credentials') {
            steps {
                script {
                    sh 'git --version'
                    sh 'git branch'
                }
            }
        }
        
        stage('Setup Python Environment') {
            steps {
                script {
                    // Install Python and pip
                    sh 'python3 --version'
                    sh 'pip3 --version'
                }
            }
        }
        
        stage('Install Dependencies') {
            steps {
                script {
                    sh 'pip3 install -r messaging_app/requirements.txt'
                    sh 'pip3 install pytest pytest-django pytest-cov flake8'
                }
            }
        }
        
        stage('Code Quality Check') {
            steps {
                script {
                    sh 'flake8 messaging_app/ --max-line-length=120 --exclude=*/migrations/*,*/__pycache__/*'
                }
            }
        }
        
        stage('Run Tests') {
            steps {
                script {
                    // Set Django settings for testing
                    sh 'export DJANGO_SETTINGS_MODULE=messaging_app.settings'
                    
                    // Run tests with coverage
                    sh 'cd messaging_app && python -m pytest chats/tests/ -v --cov=chats --cov-report=html --cov-report=xml'
                }
            }
        }
        
        stage('Generate Test Report') {
            steps {
                script {
                    // Publish test results
                    publishTestResults testResultsPattern: '**/test-results/*.xml'
                    
                    // Publish coverage report
                    publishHTML([
                        allowMissing: false,
                        alwaysLinkToLastBuild: true,
                        keepAll: true,
                        reportDir: 'messaging_app/htmlcov',
                        reportFiles: 'index.html',
                        reportName: 'Coverage Report'
                    ])
                }
            }
        }
        
        stage('Build Docker Image') {
            steps {
                script {
                    sh 'docker build -t ${DOCKER_IMAGE}:${DOCKER_TAG} -f messaging_app/Dockerfile messaging_app/'
                    sh 'docker tag ${DOCKER_IMAGE}:${DOCKER_TAG} ${DOCKER_IMAGE}:latest'
                }
            }
        }
        
        stage('Push Docker Image') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: 'docker-hub-credentials', usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
                        sh 'echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin'
                        sh 'docker push ${DOCKER_IMAGE}:${DOCKER_TAG}'
                        sh 'docker push ${DOCKER_IMAGE}:latest'
                    }
                }
            }
        }
    }
    
    post {
        always {
            // Clean up workspace
            cleanWs()
        }
        success {
            echo 'Pipeline completed successfully!'
        }
        failure {
            echo 'Pipeline failed!'
        }
    }
}
